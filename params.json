{"name":"SLF4S","tagline":"Simple Logging Facade for Scala","body":"# About\r\n\r\nA Simple Logging Facade for Scala (SLF4S) built on top of SLF4J.\r\n\r\n# Features\r\n* Logger methods that support lazy evaluation of messages;\r\n* A Logging Mixin for conveniently obtaining a Logger; and\r\n* A LoggerFactory that is ClassTag aware.\r\n\r\n# Installation\r\n### Build.scala\r\n```scala\r\n      libraryDependencies ++= Seq(\r\n        \"org.slf4s\" %% \"slf4s-api\" % \"1.7.6\",\r\n        \"ch.qos.logback\" % \"logback-classic\" % \"1.1.1\"\r\n      )\r\n```\r\n\r\n> You don't have to use [logback](http://logback.qos.ch/), any [slf4j](http://www.slf4j.org/) compatible framework will do.\r\n\r\n# Usage\r\n### Logging Trait\r\nThe `Logging` trait provides a `protected val log` to your class, so it'll be available in the local scope, but won't pollute your interface. You can also reference it via a self type if you're using the cake pattern.\r\n```scala\r\npackage org.slf4s\r\n\r\nimport org.scalatest.WordSpec\r\n\r\nclass LoggingExampleSpec extends WordSpec with Logging {\r\n  \"The Logging trait should be easy to use\" in {\r\n    val importantValue = 10\r\n    log.debug(s\"importantValue: $importantValue\")\r\n    val importantThrowable = new Throwable\r\n    log.debug(s\"importantValue: $importantValue\", importantThrowable)\r\n  }\r\n}\r\n```\r\n\r\n### Logger Factory (object)\r\nThe `LoggerFactory` gives you great flexibility and behaves much like the [slf4j](http://www.slf4j.org/) LoggerFactory. You probably only need to use this if you wish to log as a class other than the one in scope.\r\n``` scala\r\npackage org.slf4s\r\n\r\nimport org.scalatest.WordSpec\r\n\r\nclass LoggerFactoryExampleSpec extends WordSpec {\r\n  \"The LoggerFactory should be familiar\" in {\r\n    val log = LoggerFactory.getLogger[LoggerFactoryExampleSpec]\r\n    val importantValue = 10\r\n    log.debug(s\"importantValue: $importantValue\")\r\n    val importantThrowable = new Throwable\r\n    log.debug(s\"importantValue: $importantValue\", importantThrowable)\r\n  }\r\n}\r\n```\r\n\r\n### String Interpolation\r\nScala 2.10.0 offers a new mechanism to create strings from your data: [String Interpolation](http://docs.scala-lang.org/overviews/core/string-interpolation.html). This allows you to to embed variable references and expressions directly in processed string literals.\r\n\r\n``` scala\r\npackage org.slf4s\r\n\r\nimport org.scalatest.WordSpec\r\n\r\nclass StringInterpolatorExampleSpec extends WordSpec with Logging {\r\n  \r\n  \"String interpolation should work\" in {\r\n    val name = \"James\"\r\n    val height = 1.9d\r\n    log.debug(s\"Hello, $name\")  // Hello, James\r\n    log.debug(s\"1 + 1 = ${1 + 1}\") // 1 + 1 = 2\r\n    log.debug(f\"$name%s is $height%2.2f meters tall\")  // James is 1.90 meters tall\r\n    log.debug(raw\"a\\nb\") // New line is preserved\r\n  }\r\n}\r\n```\r\n","google":"UA-40902100-2","note":"Don't delete this file! It's used internally to help with page regeneration."}